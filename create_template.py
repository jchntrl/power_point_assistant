#!/usr/bin/env python3
"""
Create a PowerPoint template for the PowerPoint Assistant application.

This script creates a professional template with proper layouts and placeholders
that the PowerPoint Assistant system expects.
"""

import logging
from pathlib import Path
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN, MSO_ANCHOR
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_template():
    """Create a PowerPoint template with proper layouts and branding."""
    
    # Create a new presentation
    prs = Presentation()
    
    # Remove default slides
    while len(prs.slides) > 0:
        rId = prs.slides._sldIdLst[0].rId
        prs.part.drop_rel(rId)
        del prs.slides._sldIdLst[0]
    
    # Define color scheme (Professional blue/gray)
    PRIMARY_COLOR = RGBColor(0, 100, 177)    # Professional blue
    SECONDARY_COLOR = RGBColor(75, 75, 75)   # Dark gray
    ACCENT_COLOR = RGBColor(255, 140, 0)     # Orange accent
    LIGHT_GRAY = RGBColor(240, 240, 240)     # Light gray
    WHITE = RGBColor(255, 255, 255)          # White
    
    logger.info("Creating slide master and layouts...")
    
    # Get slide master
    slide_master = prs.slide_master
    
    # Layout 0: Title Slide
    logger.info("Creating Layout 0: Title Slide")
    title_layout = prs.slide_layouts[0]
    
    # Customize title slide layout
    for shape in title_layout.placeholders:
        if shape.placeholder_format.type == 1:  # Title placeholder
            shape.top = Inches(2.5)
            shape.left = Inches(1)
            shape.width = Inches(8)
            shape.height = Inches(1.5)
        elif shape.placeholder_format.type == 2:  # Subtitle placeholder
            shape.top = Inches(4.5)
            shape.left = Inches(1)
            shape.width = Inches(8)
            shape.height = Inches(1)
    
    # Layout 1: Title and Content (Bullet Points)
    logger.info("Creating Layout 1: Title and Content")
    content_layout = prs.slide_layouts[1]
    
    # Customize content layout placeholders
    for shape in content_layout.placeholders:
        if shape.placeholder_format.type == 1:  # Title placeholder
            shape.top = Inches(0.5)
            shape.left = Inches(0.5)
            shape.width = Inches(9)
            shape.height = Inches(1)
        elif shape.placeholder_format.type == 2:  # Content placeholder
            shape.top = Inches(1.8)
            shape.left = Inches(0.5)
            shape.width = Inches(9)
            shape.height = Inches(5.5)
    
    # Add background and styling to master
    slide_master.background.fill.solid()
    slide_master.background.fill.fore_color.rgb = WHITE
    
    logger.info("Template layouts configured successfully")
    
    return prs


def add_sample_slides(prs):
    """Add sample slides to demonstrate the template."""
    
    logger.info("Adding sample slides...")
    
    # Sample Title Slide
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    
    title.text = "PowerPoint Assistant Template"
    subtitle.text = "Professional Presentation Template\nGenerated by AI-Powered System"
    
    # Format title
    title_paragraph = title.text_frame.paragraphs[0]
    title_paragraph.font.name = "Calibri"
    title_paragraph.font.size = Pt(44)
    title_paragraph.font.color.rgb = RGBColor(0, 100, 177)
    title_paragraph.alignment = PP_ALIGN.CENTER
    
    # Format subtitle
    subtitle_paragraph = subtitle.text_frame.paragraphs[0]
    subtitle_paragraph.font.name = "Calibri"
    subtitle_paragraph.font.size = Pt(24)
    subtitle_paragraph.font.color.rgb = RGBColor(75, 75, 75)
    subtitle_paragraph.alignment = PP_ALIGN.CENTER
    
    # Sample Content Slide
    bullet_slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(bullet_slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Template Features"
    
    # Format title
    title_paragraph = title.text_frame.paragraphs[0]
    title_paragraph.font.name = "Calibri"
    title_paragraph.font.size = Pt(32)
    title_paragraph.font.color.rgb = RGBColor(0, 100, 177)
    
    # Add bullet points
    tf = content.text_frame
    tf.text = "Professional layout with proper placeholders"
    
    # Add more bullet points
    bullet_points = [
        "Title and content layouts optimized for AI generation",
        "Consistent formatting and color scheme",
        "Compatible with PowerPoint Assistant system",
        "Ready for automated content population"
    ]
    
    for bullet_point in bullet_points:
        p = tf.add_paragraph()
        p.text = bullet_point
        p.level = 0
        p.font.name = "Calibri"
        p.font.size = Pt(18)
        p.font.color.rgb = RGBColor(75, 75, 75)
    
    logger.info("Sample slides added successfully")


def save_template(prs, output_path: Path):
    """Save the template to the specified path."""
    
    try:
        # Ensure output directory exists
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Save the presentation
        prs.save(str(output_path))
        logger.info(f"Template saved successfully: {output_path}")
        
        # Display template info
        logger.info(f"Template contains {len(prs.slide_layouts)} layouts:")
        for i, layout in enumerate(prs.slide_layouts):
            logger.info(f"  Layout {i}: {layout.name}")
            
        logger.info(f"Template contains {len(prs.slides)} sample slides")
        
    except Exception as e:
        logger.error(f"Failed to save template: {e}")
        raise


def main():
    """Main function to create the PowerPoint template."""
    
    logger.info("Starting PowerPoint template creation...")
    
    # Create the template
    prs = create_template()
    
    # Add sample slides
    add_sample_slides(prs)
    
    # Save the template
    output_path = Path("PowerPoint_Assistant_Template.pptx")
    save_template(prs, output_path)
    
    logger.info("PowerPoint template creation completed!")
    
    # Instructions
    print("\n" + "="*60)
    print("‚úÖ PowerPoint Template Created Successfully!")
    print("="*60)
    print(f"üìÅ Template saved as: {output_path.absolute()}")
    print("\nüìã Next Steps:")
    print("1. Copy the template to your project root directory")
    print("2. Update .env file to point to this template:")
    print(f"   DEFAULT_TEMPLATE={output_path.name}")
    print("\nüé® Template Features:")
    print("‚Ä¢ Professional blue/gray color scheme")
    print("‚Ä¢ Optimized layouts for AI content generation")
    print("‚Ä¢ Proper placeholders for title and content")
    print("‚Ä¢ Compatible with PowerPoint Assistant system")
    print("\nüîß Template includes:")
    print("‚Ä¢ Layout 0: Title Slide")
    print("‚Ä¢ Layout 1: Title and Content (Bullet Points)")
    print("‚Ä¢ Sample slides demonstrating usage")


if __name__ == "__main__":
    main()